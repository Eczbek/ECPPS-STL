namespace std
{
     template <typename _T>
     struct remove_const
     {
          using type = _T;
     };
     template <typename _T>
     struct remove_const<const _T>
     {
          using type = _T;
     };

     template <typename _T>
     struct remove_volatile
     {
          using type = _T;
     };
     template <typename _T>
     struct remove_volatile<volatile _T>
     {
          using type = _T;
     };

     template <typename _T>
     struct remove_cv
     {
          using type = typename remove_volatile<typename remove_const<_T>::type>::type;
     };

     template <typename _T>
     struct remove_reference
     {
          using type = _T;
     };
     template <typename _T>
     struct remove_reference<_T&>
     {
          using type = _T;
     };
     template <typename _T>
     struct remove_reference<_T&&>
     {
          using type = _T;
     };
     template <typename _T>
     using remove_reference_t = typename remove_reference<_T>::type;
     template <typename _T>
     using remove_const_t = typename remove_const<_T>:type;
     template <typename _T>
     using remove_volatile_t = typename remove_volatile<_T>:type;
     template <typename _T>
     using remove_cv_t = typename remove_cv<_T>:type;
}
